type Band {
  _id: ID!
  name: String
  origin: String
  members: [Member]
  website: String
  genres: [Genre]
}

type Member {
  artist: Artist
  instrument: String
  years: [String]
}

input MemberInput {
  artistId: String
  instrument: String
  years: [String]
}

type Query {
  band(id: ID!): Band
  bands(limit: Int, offset: Int): [Band]
}

type Mutation {
  createBand(name: String!, origin: String, website: String, members: [MemberInput], genresIds: [String]): Band
  updateBand(id: ID!, name: String, origin: String, website: String, members: [MemberInput], genresIds: [String]): Band
  deleteBand(id: ID!): DeleteResponse
}

type DeleteResponse{
  acknowledged: Boolean!
  deletedCount: Int
}